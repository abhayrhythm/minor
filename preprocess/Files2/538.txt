pleas refer post read avl tree handl duplic 
handl duplic binari search tree 
augment avl tree node store count togeth regular field like key left right pointer 
insert key 12 10 20 9 11 10 12 12 empti binari search tree would creat follow 
12 3 10 2 20 1 9 1 11 1 count key shown bracket c implement normal avl tree count everi key 
code basic taken code insert delet avl tree 
chang made handl duplic highlight rest code 
import thing note chang similar simpl binari search tree chang 
avl tree handl duplic includ stdio h includ stdlib h avl tree node struct node int key struct node left struct node right int height int count util function get maximum two integ int max int int b util function get height tree int height struct node n n null return 0 return n height util function get maximum two integ int max int int b return b 
b helper function alloc new node given key null left right pointer 
struct node newnod int key struct node node struct node malloc sizeof struct node node key key node left null node right null node height 1 new node initi ad leaf node count 1 return node util function right rotat subtre root see diagram given 
struct node rightrot struct node struct node x left struct node t2 x right perform rotat x right left t2 updat height height max height left height right 1 x height max height x left height x right 1 return new root return x util function left rotat subtre root x see diagram given 
struct node leftrot struct node x struct node x right struct node t2 left perform rotat left x x right t2 updat height x height max height x left height x right 1 height max height left height right 1 return new root return get balanc factor node n int getbal struct node n n null return 0 return height n left height n right struct node insert struct node node int key 1 perform normal bst rotat node null return newnod key key alreadi exist bst icnrement count return key node key node count return node otherwis recur tree key node key node left insert node left key els node right insert node right key 2 updat height ancestor node node height max height node left height node right 1 3 get balanc factor ancestor node check whether node becam unbalanc int balanc getbal node node becom unbalanc 4 case left left case balanc 1 key node left key return rightrot node right right case balanc 1 key node right key return leftrot node left right case balanc 1 key node left key node left leftrot node left return rightrot node right left case balanc 1 key node right key node right rightrot node right return leftrot node return unchang node pointer return node given non empti binari search tree return node minimum key valu found tree 
note entir tree need search 
struct node minvaluenod struct node node struct node current node loop find leftmost leaf current left null current current left return current struct node deletenod struct node root int key step 1 perform standard bst delet root null return root key delet smaller root key lie left subtre key root key root left deletenod root left key key delet greater root key lie right subtre els key root key root right deletenod root right key key root key node delet els key present simpli decrement count return root count 1 root count return els delet node node one child child root left null root right null struct node temp root left 
root left root right child case temp null temp root root null els one child case root temp copi content non empti child free temp els node two children get inord successor smallest right subtre struct node temp minvaluenod root right copi inord successor data node root key temp key delet inord successor root right deletenod root right temp key tree one node return root null return root step 2 updat height current node root height max height root left height root right 1 step 3 get balanc factor node check whether node becam unbalanc int balanc getbal root node becom unbalanc 4 case left left case balanc 1 getbal root left 0 return rightrot root left right case balanc 1 getbal root left 0 root left leftrot root left return rightrot root right right case balanc 1 getbal root right 0 return leftrot root right left case balanc 1 getbal root right 0 root right rightrot root right return leftrot root return root util function print preorder travers tree 
function also print height everi node void preorder struct node root root null printf root key root count preorder root left preorder root right drier program test function int main struct node root null construct tree given figur root insert root 9 root insert root 5 root insert root 10 root insert root 5 root insert root 9 root insert root 7 root insert root 17 printf pre order travers construct avl tree n preorder root root deletenod root 9 printf npre order travers delet 10 n preorder root return 0 output pre order travers construct avl tree 9 2 5 2 7 1 10 1 17 1 pre order travers delet 10 9 1 5 2 7 1 10 1 17 1 thank rounaq jhunjhunu wala share initi code 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push 

direct graph strongli connect path pair vertic 
strongli connect compon scc direct graph maxim strongli connect subgraph 
exampl 3 scc follow graph 
discuss kosaraju algorithm strongli connect compon 
previous discuss algorithm requir two df travers graph 
post tarjan algorithm discuss requir one df travers 
tarjan algorithm base follow fact 1 df search produc df tree forest 2 strongli connect compon form subtre df tree 
3 find head subtre print store node subtre includ head one scc 
4 back edg one scc anoth cross edg cross edg use process graph 
find head scc calcul desc low array done articul point bridg biconnect compon 
discuss previou post low u indic earliest visit vertex vertex minimum discoveri time reach subtre root u node u head disc u low u 
disc low valu click imag see properli strongli connect compon relat direct graph disc low valu relat direct undirect graph pic taken undirect graph 
figur shown graph one df tree could differ df tree graph depend order edg travers 
df tree continu arrow tree edg dash arrow back edg df tree edg disc low valu showin figur everi node disc low 
disc time node visit 1st time df travers 
node b c j df tree disc valu 1 2 3 10 low df tree tree edg take us forward ancestor node one descend 
exampl node c tree edg take us node node g node etc 
back edg take us backward descend node one ancestor 
exampl node g back edg take us e c look tree back edg togeth see start travers one node may go tree via tree edg go via back edg 
exampl node e go g go c similarli e go j go f low valu node tell topmost reachabl ancestor minimum possibl disc valu via subtre node 
node low valu equal disc valu anyway node ancestor 
look subtre see node take us ancestor 
multipl back edg subtre take us differ ancestor take one minimum disc valu e 
topmost one 
look node f two subtre 
subtre node g take us e c subtre take us back f 
topmost ancestor c f reach low valu f 3 disc valu c 
base discuss clear low valu b c 1 topmost node b c reach 
way low valu e f g 3 low valu h j 6 node u df start low set disc 1st 
later df perform children v one one low valu u chang two case case1 tree edg node v visit alreadi df v complet minimum low u low v updat low u 
low u min low u low v case 2 back edg child v alreadi visit minimum low u disc v updat low u 
low u min low u disc v case two take low v instead disc v 

answer 
think answer probabl understood low disc concept 
imag sourc http www cs yale edu home aspn pinewiki depthfirstsearch html low disc valu help solv graph problem like articul point bridg biconnect compon 
track subtre root head use stack keep push node visit 
head node found pop node stack till get head stack 
make sure consid cross edg reach node alreadi visit process visit node present stack els ignor node 
follow c implement tarjan algorithm print scc 
c program find strongli connect compon given direct graph use tarjan algorithm singl df includ iostream includ list includ stack defin nil 1 use namespac std class repres direct graph class graph int v 
vertic list int adj dynam array adjac list recurs df base function use scc void sccutil int u int disc int low stack int st bool stackmemb public graph int v constructor void addedg int v int w function add edg graph void scc print strongli connect compon graph graph int v v v adj new list int v void graph addedg int v int w adj v push_back w recurs function find print strongli connect compon use df travers u vertex visit next disc store discoveri time visit vertic low earliest visit vertex vertex minimum discoveri time reach subtre root current vertex st store connect ancestor could part scc stackmemb bit index array faster check whether node stack void graph sccutil int u int disc int low stack int st bool stackmemb static variabl use simplic avoid use static variabl pass pointer 
static int time 0 initi discoveri time low valu disc u low u time st push u stackmemb u true go vertic adjac list int iter adj u begin adj u end int v v current adjac u v visit yet recur disc v 1 sccutil v disc low st stackmemb check subtre root v connect one ancestor u case 1 per discuss disc low valu low u min low u low v updat low valu u v still stack e 
back edg cross edg 
case 2 per discuss disc low valu els stackmemb v true low u min low u disc v head node found pop stack print scc int w 0 store stack extract vertic low u disc u st top u w int st top cout w stackmemb w fals st pop w int st top cout w n stackmemb w fals st pop function df travers 
use sccutil void graph scc int disc new int v int low new int v bool stackmemb new bool v stack int st new stack int initi disc low stackmemb array int 0 v disc nil low nil stackmemb fals call recurs helper function find strongli connect compon df tree vertex int 0 v disc nil sccutil disc low st stackmemb driver program test function int main cout nscc first graph n graph g1 5 g1 addedg 1 0 g1 addedg 0 2 g1 addedg 2 1 g1 addedg 0 3 g1 addedg 3 4 g1 scc cout nscc second graph n graph g2 4 g2 addedg 0 1 g2 addedg 1 2 g2 addedg 2 3 g2 scc cout nscc third graph n graph g3 7 g3 addedg 0 1 g3 addedg 1 2 g3 addedg 2 0 g3 addedg 1 3 g3 addedg 1 4 g3 addedg 1 6 g3 addedg 3 5 g3 addedg 4 5 g3 scc cout nscc fourth graph n graph g4 11 g4 addedg 0 1 g4 addedg 0 3 g4 addedg 1 2 g4 addedg 1 4 g4 addedg 2 0 g4 addedg 2 6 g4 addedg 3 2 g4 addedg 4 5 g4 addedg 4 6 g4 addedg 5 6 g4 addedg 5 7 g4 addedg 5 8 g4 addedg 5 9 g4 addedg 6 4 g4 addedg 7 9 g4 addedg 8 9 g4 addedg 9 8 g4 scc cout nscc fifth graph n graph g5 5 g5 addedg 0 1 g5 addedg 1 2 g5 addedg 2 3 g5 addedg 2 4 g5 addedg 3 0 g5 addedg 4 2 g5 scc return 0 output scc first graph 4 3 1 2 0 scc second graph 3 2 1 0 scc third graph 5 3 4 6 2 1 0 scc fourth graph 8 9 7 5 4 6 3 2 1 0 10 scc fifth graph 4 3 2 1 0 time complex algorithm mainli call df df take v e graph repres use adjac list 
refer http en wikipedia org wiki tarjan 27s_strongly_connected_components_algorithm http www ic uci edu eppstein 161 960220 html sca articl contribut anurag singh 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

unlik linear data structur array link list queue stack etc one logic way travers tree travers differ way 
follow gener use way travers tree 
exampl tree depth first travers inord b preorder c postord breadth first level order travers pleas see post breadth first travers 
inord travers algorithm inord tree 1 travers left subtre e call inord left subtre 2 visit root 
3 travers right subtre e call inord right subtre use inord case binari search tree bst inord travers give node non decreas order 
get node bst non increas order variat inord travers inord itravers revers use 
exampl inord travers given figur 4 2 5 1 3 practic inord travers preorder travers algorithm preorder tree 1 visit root 
2 travers left subtre e call preorder left subtre 3 travers right subtre e call preorder right subtre use preorder preorder travers use creat copi tree 
preorder travers also use get prefix express express tree 
pleas see http en wikipedia org wiki polish_not know prefix express use 
exampl preorder travers given figur 1 2 4 5 3 practic preorder travers postord travers algorithm postord tree 1 travers left subtre e call postord left subtre 2 travers right subtre e call postord right subtre 3 visit root 
use postord postord travers use delet tree 
pleas see question delet tree detail 
postord travers also use get postfix express express tree 
pleas see http en wikipedia org wiki reverse_polish_not usag postfix express 
practic postord travers exampl postord travers given figur 4 5 2 3 1 c c program differ tree travers includ stdio h includ stdlib h binari tree node data pointer left child pointer right child struct node int data struct node left struct node right helper function alloc new node given data null left right pointer 
struct node newnod int data struct node node struct node malloc sizeof struct node node data data node left null node right null return node given binari tree print node accord bottom postord travers 
void printpostord struct node node node null return first recur left subtre printpostord node left recur right subtre printpostord node right deal node printf node data given binari tree print node inord void printinord struct node node node null return first recur left child printinord node left print data node printf node data recur right child printinord node right given binari tree print node preorder void printpreord struct node node node null return first print data node printf node data recur left sutre printpreord node left recur right subtre printpreord node right driver program test function int main struct node root newnod 1 root left newnod 2 root right newnod 3 root left left newnod 4 root left right newnod 5 printf npreorder travers binari tree n printpreord root printf ninord travers binari tree n printinord root printf npostord travers binari tree n printpostord root getchar return 0 python python program tree travers class repres individu node binari tree class node def __init__ self key self left none self right none self val key function inord tree travers def printinord root root first recur left child printinord root left print data node print root val recur right child printinord root right function postord tree travers def printpostord root root first recur left child printpostord root left recur right child printpostord root right print data node print root val function postord tree travers def printpreord root root first print data node print root val recur left child printpreord root left final recur right child printpreord root right driver code root node 1 root left node 2 root right node 3 root left left node 4 root left right node 5 print preorder travers binari tree printpreord root print ninord travers binari tree printinord root print npostord travers binari tree printpostord root java java program differ tree travers class contain left right child current node key valu class node int key node left right public node int item key item left right null class binarytre root binari tree node root binarytre root null given binari tree print node accord bottom postord travers 
void printpostord node node node null return first recur left subtre printpostord node left recur right subtre printpostord node right deal node system print node key given binari tree print node inord void printinord node node node null return first recur left child printinord node left print data node system print node key recur right child printinord node right given binari tree print node preorder void printpreord node node node null return first print data node system print node key recur left sutre printpreord node left recur right subtre printpreord node right wrapper recurs function void printpostord printpostord root void printinord printinord root void printpreord printpreord root driver method public static void main string arg binarytre tree new binarytre tree root new node 1 tree root left new node 2 tree root right new node 3 tree root left left new node 4 tree root left right new node 5 system println preorder travers binari tree tree printpreord system println ninord travers binari tree tree printinord system println npostord travers binari tree tree printpostord output preorder travers binari tree 1 2 4 5 3 inord travers binari tree 4 2 5 1 3 postord travers binari tree 4 5 2 3 1 time complex n let us prove complex function n problem tree travers involv defin n k n k 1 c k number node one side root n k 1 side 
let analysi boundari condit case 1 skew tree one subtre empti subtre non empti k 0 case 
n 0 n 1 c n 2t 0 n 2 2c n 3t 0 n 3 3c n 4t 0 n 4 4c 
n n 1 0 1 n 1 c n nt 0 n c valu 0 constant say travers empti tree take constant time n n c n n theta n case 2 left right subtre equal number node 
n 2t _n 2_ c recurs function standard form n n b n master method http en wikipedia org wiki master_theorem 
solv master method get n auxiliari space consid size stack function call 1 otherwis n 
adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

background centroid tree 
centroid tree node remov tree would split forest tree forest would half number vertic origin tree 
suppos n node tree 
subtre size node size tree root node 
let v size subtre root node v v 1 
u u child v adjac depth one greater depth v 
centroid node v maximum n v u1 u2 um n 2 ui th child v find centroid let undirect tree n node 
choos arbitrari node v tree 
v satisfi mathemat definit centroid centroid 
els know mathemat inequ hold conclud exist u adjac v u n 2 
make u new v recurs 
never revisit node decid move away node subtre size greater n 2 sort declar belong compon node less n 2 shall never find centroid 
case move toward centroid 
also finit mani vertic tree 
process must stop desir vertex 
algorithm select arbitrari node v start df v setup subtre size posit node v start arbitrari v belong tree check mathemat condit centroid v condit pass return current node centroid els move adjac node greatest subtre size back step 4 theorem given tree n node centroid alway exist 
proof clear approach problem alway find centroid use step 
time complex select arbitrari node v 1 df n reposit v 1 find centroid n centroid decomposit find centroid tree part tri achiev 
need think organ tree structur decreas complex answer certain type queri 
algorithm make centroid root new tree call centroid tree recurs decompos tree result forest make centroid tree children centroid last split 
centroid tree depth lg n construct n lg n find centroid n 
illustr exampl let us consid tree 16 node 
figur subtre size alreadi set use df node 1 start node 1 see condit centroid hold 
rememb v subtre size v make node 6 root centroid recurs 3 tree forest centroid split origin tree 
note figur subtre gener centroid surround dot line color color centroid 
make subsequ found centroid children centroid split last obtain centroid tree 
note tree contain singl element element centroid 
use color differenti tree leaf node repres 
c program centroid decomposit tree includ bit stdc h use namespac std defin maxn 1025 vector int tree maxn vector int centroidtre maxn bool centroidmark maxn method add edg node undirect tree void addedg int u int v tree u push_back v tree v push_back u method setup subtre size node current tree void df int src bool visit int subtree_s int n mark node visit visit src true increas count node visit n 1 initi subtre size current node subtree_s src 1 vector int iter recur non visit non centroid neighbour tree src begin tree src end visit centroidmark df visit subtree_s n subtree_s src subtree_s int getcentroid int src bool visit int subtree_s int n assum current node centroid bool is_centroid true mark visit visit src true track heaviest child node use case node centroid int heaviest_child 0 vector int iter iter adjac node children visit mark centroid subtre tree src begin tree src end visit centroidmark adjac node n 2 node current node cannot centroid subtree_s n 2 is_centroid fals updat heaviest child heaviest_child 0 subtree_s subtree_s heaviest_child heaviest_child current node centroid is_centroid n subtree_s src n 2 return src els recur heaviest child return getcentroid heaviest_child visit subtree_s n function get centroid tree root src 
tree may origin one may belong forest int getcentroid int src bool visit maxn int subtree_s maxn initi auxiliari array memset visit fals sizeof visit memset subtree_s 0 sizeof subtree_s variabl hold number node current tree int n 0 df set subtre size node current tree df src visit subtree_s n int 1 maxn visit fals int centroid getcentroid src visit subtree_s n centroidmark centroid true return centroid function gener centroid tree tree root src int decomposetre int root printf decomposetre n root get sentorid current tree int cend_tre getcentroid root printf cend_tre vector int iter everi node adjac found centroid alreadi mark centroid tree cend_tre begin tree cend_tre end centroidmark decompos subtre root adjac node int cend_subtre decomposetre add edg tree centroid centroid subtre centroidtre cend_tre push_back cend_subtre centroidtre cend_subtre push_back cend_tre return centroid tree return cend_tre driver function int main number node tree int n 16 argument order node u node v sequenc start 1 addedg 1 4 addedg 2 4 addedg 3 4 addedg 4 5 addedg 5 6 addedg 6 7 addedg 7 8 addedg 7 9 addedg 6 10 addedg 10 11 addedg 11 12 addedg 11 13 addedg 12 14 addedg 13 15 addedg 13 16 gener centroid tree decomposetre 1 return 0 output 6 4 1 2 3 5 7 8 9 11 10 12 14 13 15 16 applic consid exampl problem given weight tree n node find minimum number edg path length k return 1 path exist 
1 n 200000 1 length j 1000000 integ weight 1 k 1000000 brute forc solut everi node perform df find distanc number edg everi node time complex n2 obvious ineffici n 200000 solv problem n log n time use centroid decomposit 
perform centroid decomposit get tree subtre start root decomposit solv problem subtre follow solv problem child tree current subtre 
perform df centroid current subtre comput minimum edg count path includ centroid two case centroid end middl path use timestamp array size 1000000 keep track distanc centroid possibl minimum edg count distanc take minimum two 

given binari tree two node say b determin whether two node cousin 
two node cousin level differ parent 
exampl 6 3 5 7 8 1 3 say two node 7 1 result true 
say two node 3 5 result fals 
say two node 7 5 result fals 
strongli recommend minim browser tri first 
idea find level one node 
use found level check b level 
b given level final check children parent 
follow implement approach 
c c program check two node binari tree cousin includ stdio h includ stdlib h binari tree node struct node int data struct node left right util function creat new binari tree node struct node newnod int item struct node temp struct node malloc sizeof struct node temp data item temp left temp right null return temp recurs function check two node sibl int issibl struct node root struct node struct node b base case root null return 0 return root left root right b root left b root right issibl root left b issibl root right b recurs function find level node ptr binari tree int level struct node root struct node ptr int lev base case root null return 0 root ptr return lev return level node present left subtre int l level root left ptr lev 1 l 0 return l els search right subtre return level root right ptr lev 1 return 1 b cousin otherwis 0 int iscousin struct node root struct node struct node b 1 
two node level binari tree 
2 
two node sibl mean parent node 
level root 1 level root b 1 
issibl root b return 1 els return 0 driver program test function int main struct node root newnod 1 root left newnod 2 root right newnod 3 root left left newnod 4 root left right newnod 5 root left right right newnod 15 root right left newnod 6 root right right newnod 7 root right left right newnod 8 struct node node1 node2 node1 root left left node2 root right right iscousin root node1 node2 
put ye put return 0 java java program check two binari tree cousin class node int data node left right node int item data item left right null class binarytre node root recurs function check two node sibl boolean issibl node node node node b base case node null return fals return node left node right b node left b node right issibl node left b issibl node right b recurs function find level node ptr binari tree int level node node node ptr int lev base case node null return 0 node ptr return lev return level node present left subtre int l level node left ptr lev 1 l 0 return l els search right subtre return level node right ptr lev 1 return 1 b cousin otherwis 0 boolean iscousin node node node node b 1 two node level binari tree 
2 two node sibl mean parent node 
return level node 1 level node b 1 issibl node b driver program test function public static void main string arg binarytre tree new binarytre tree root new node 1 tree root left new node 2 tree root right new node 3 tree root left left new node 4 tree root left right new node 5 tree root left right right new node 15 tree root right left new node 6 tree root right right new node 7 tree root right left right new node 8 node node1 node2 node1 tree root left left node2 tree root right right tree iscousin tree root node1 node2 system println ye els system println code contribut mayank jaiswal python python program check two node binari tree cousin binari tree node class node constructor creat new binari tree def __init__ self data self data data self left none self right none def issibl root b base case root none return 0 return root left root right b root left b root right issibl root left b issibl root right b recurs function find level node ptr binari tree def level root ptr lev base case root none return 0 root ptr return lev return level node present left subtre l level root left ptr lev 1 l 0 return l els search right subtre return level root right ptr lev 1 return 1 b cousin otherwis 0 def iscousin root b 1 two node level binari tree two node sibl mean smae parent node level root 1 level root b 1 issibl root b return 1 els return 0 driver program test function root node 1 root left node 2 root right node 3 root left left node 4 root left right node 5 root left right right node 15 root right left node 6 root right right node 7 root right left right node 8 node1 root left right node2 root right right print ye iscousin root node1 node2 1 els code contribut nikhil kumar singh nickzuck_007 ouput ye time complex solut n three travers binari tree 
articl contribut ayush srivastava 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

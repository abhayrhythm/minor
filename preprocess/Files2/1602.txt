given binari tree target node binari tree integ valu k print node distanc k given target node 
parent pointer avail 
consid tree shown diagram input target pointer node data 8 root pointer node data 20 k 2 output 10 14 22 target 14 k 3 output 4 20 strongli recommend click practic move solut 
two type node consid 
1 node subtre root target node 
exampl target node 8 k 2 node 10 14 
2 node may ancestor target node subtre 
target node 8 k 2 node 22 come categori 
find first type node easi implement 
travers subtre root target node decrement k recurs call 
k becom 0 print node current travers see detail 
call function printkdistancenodedown 
find node second type 
output node lie subtre target node root must go ancestor 
everi ancestor find distanc target node let distanc go subtre target found left subtre go right subtre vice versa ancestor find node k distanc ancestor 
follow implement approach 
c includ iostream use namespac std binari tree node struct node int data struct node left right recurs function print node distanc k tree subtre root given root 
see void printkdistancenodedown node root int k base case root null k 0 return reach k distant node print k 0 cout root data endl return recur left right subtre printkdistancenodedown root left k 1 printkdistancenodedown root right k 1 print node distanc k given target node 
k distant node may upward downward 
function return distanc root target node return 1 target node present tree root root 
int printkdistancenod node root node target int k base case 1 tree empti return 1 root null return 1 target root 
use downward function print node distanc k subtre root target root root target printkdistancenodedown root k return 0 recur left subtre int dl printkdistancenod root left target k check target node found left subtre dl 1 root distanc k target print root note dl distanc root left child target dl 1 k cout root data endl els go right subtre print k dl 2 distant node note right child 2 edg away left child els printkdistancenodedown root right k dl 2 add 1 distanc return valu parent call return 1 dl mirror code right subtre note reach node found left subtre int dr printkdistancenod root right target k dr 1 dr 1 k cout root data endl els printkdistancenodedown root left k dr 2 return 1 dr target neither present left right subtre return 1 util function creat new binari tree node node newnod int data node temp new node temp data data temp left temp right null return temp driver program test function int main let us construct tree shown diagram node root newnod 20 root left newnod 8 root right newnod 22 root left left newnod 4 root left right newnod 12 root left right left newnod 10 root left right right newnod 14 node target root left right printkdistancenod root target 2 return 0 java java program print node distanc k given node binari tree node class node int data node left right node int item data item left right null class binarytre node root recurs function print node distanc k tree subtre root given root 
void printkdistancenodedown node node int k base case node null k 0 return reach k distant node print k 0 system print node data system println return recur left right subtre printkdistancenodedown node left k 1 printkdistancenodedown node right k 1 print node distanc k given target node 
k distant node may upward downward function return distanc root target node return 1 target node present tree root root 
int printkdistancenod node node node target int k base case 1 tree empti return 1 node null return 1 target root 
use downward function print node distanc k subtre root target root node target printkdistancenodedown node k return 0 recur left subtre int dl printkdistancenod node left target k check target node found left subtre dl 1 root distanc k target print root note dl distanc root left child target dl 1 k system print node data system println els go right subtre print k dl 2 distant node note right child 2 edg away left child els printkdistancenodedown node right k dl 2 add 1 distanc return valu parent call return 1 dl mirror code right subtre note reach node found left subtre int dr printkdistancenod node right target k dr 1 dr 1 k system print node data system println els printkdistancenodedown node left k dr 2 return 1 dr target neither present left right subtre return 1 driver program test function public static void main string arg binarytre tree new binarytre let us construct tree shown diagram tree root new node 20 tree root left new node 8 tree root right new node 22 tree root left left new node 4 tree root left right new node 12 tree root left right left new node 10 tree root left right right new node 14 node target tree root left right tree printkdistancenod tree root target 2 code contribut mayank jaiswal python python program print node distanc k given node binari tree node class node constructor creat new node def __init__ self data self data data self left none self right none recurs function print node distanc k int tree subtre root given root 
see def printkdistancenodedown root k base case root none k 0 return reach k distant node print k 0 print root data return recur left right subte printkdistancenodedown root left k 1 printkdistancenodedown root right k 1 print node distanc k given target node k distant node may upward downward 
function return distanc root target node return 1 target node present tree root root def printkdistancenod root target k base case 1 tree empti return 1 root none return 1 target root 
use downward function print node distanc k subtre root target root root target printkdistancenodedown root k return 0 recur left subtre dl printkdistancenod root left target k check target node found left subtre dl 1 root distanc k target print root note dl distanc root left child target dl 1 k print root data els go right subtree print k dl 2 distant node note right child 2 edg away left chlid els printkdistancenodedown root right k dl 2 add 1 distanc return valu parent call return 1 dl mirror code right subtre note reach node found left subtre dr printkdistancenod root right target k dr 1 dr 1 k print root data els printkdistancenodedown root left k dr 2 return 1 dr target neither present left right subtre return 1 driver program test function root node 20 root left node 8 root right node 22 root left left node 4 root left right node 12 root left right left node 10 root left right right node 14 target root left right printkdistancenod root target 2 code contribut nikhil kumar singh nickzuck_007 output 4 20 time complex first look time complex look n take closer look observ node travers twice 
therefor time complex n 
articl contribut prasant kumar 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

given ancestor matrix mat n n ancestor matrix defin 
mat j 1 ancestor j mat j 0 otherwis construct binari tree given ancestor matrix valu node 0 n 1 
may assum input provid program valid tree construct 
mani binari tree construct one input 
program construct one 
exampl input 0 1 1 0 0 0 0 0 0 output root one tree 
0 0 1 2 2 1 input 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 output root one tree 
5 5 5 1 2 2 1 1 2 0 4 3 3 0 4 4 0 3 differ possibl output ancestor matrix store child left right 
problem mainli revers problem 
construct ancestor matrix given binari tree strongli recommend minim browser tri first 
observ use solut row correspond leav 0 row correspond root maximum number 1 
count 1 th row indic number descend node idea construct tree bottom manner 
1 creat array node pointer node 
2 store row number correspond given count 
use multimap purpos 
3 process entri multimap smallest count largest note entri map multimap travers sort order 
follow everi entri 
creat new node current row number 
b node leaf node consid descend whose parent set make current node parent 
4 last process node node maximum sum root tree 
c implement idea 
follow step 
given ancestor matrix binari tree construct tree 
includ bit stdc h use namespac std defin n 6 binari tree node struct node int data node left right helper function creat new node node newnod int data node node new node node data data node left node right null return node construct tree ancestor matrix node ancestortre int mat n binari array determin weather parent set node int parent n 0 root store root construct tree node root null creat multimap sum use key row number use valu multimap int int mm int 0 n int sum 0 initi sum row int j 0 j n j sum mat j insert sum pair multimap mm insert pair int int sum node store node construct tree node node n travers entri multimap 
note valu access increas order sum auto mm begin mm end creat new node everi valu node second newnod second store last process node 
node root loop termin root node second non leaf node first 0 travers row second matrix int 0 n parent set ancestor exit parent mat second check unoccupi left right node set parent node node second left node second left node els node second right node parent 1 return root given binari tree print node inord void printinord node node node null return printinord node left printf node data printinord node right driver program int main int mat n n 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 node root ancestortre mat cout inord travers tree n printinord root return 0 output inord travers tree 0 1 4 5 3 2 note also use array vector place multimap 
use multimap simplic 
array vector would improv perform insert access element would take 1 time 
articl contribut aditya goel 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

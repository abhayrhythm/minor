given binari tree need check heap properti binari tree need fulfil follow two condit heap complet tree e 
level except last full 
everi node valu greater equal child node consid max heap 
exampl tree contain heap properti check condit separ check complet iscomplet check heap isheaputil function written 
detail iscomplet function found 
isheaputil function written consid follow thing everi node 2 children 0 child last level node 1 child one node 
node child leaf node return true base case node one child must left child complet tree need compar node singl child 
node child check heap properti node recur subtre 
complet code 
implement c c c program check binari tree max heap ot includ stdio h includ stdlib h includ stdbool h tree node structur struct node int key struct node left struct node right helper function alloc new node struct node newnod int k struct node node struct node malloc sizeof struct node node key k node right node left null return node function count number node binari tree unsign int countnod struct node root root null return 0 return 1 countnod root left countnod root right function check binari tree complet bool iscompleteutil struct node root unsign int index unsign int number_nod empti tree complet root null return true index assign current node number node tree tree complet index number_nod return fals recur left right subtre return iscompleteutil root left 2 index 1 number_nod iscompleteutil root right 2 index 2 number_nod function check heap properti tree 
bool isheaputil struct node root base case singl node satisfi properti root left null root right null return true node second last level root right null check heap properti node recurs call need check last level return root key root left key els check heap properti node recurs check heap properti left right subtre root key root left key root key root right key return isheaputil root left isheaputil root right els return fals function check binari tree heap 
bool isheap struct node root two use iscompleteutil unsign int node_count countnod root unsign int index 0 iscompleteutil root index node_count isheaputil root return true return fals driver program int main struct node root null root newnod 10 root left newnod 9 root right newnod 8 root left left newnod 7 root left right newnod 6 root right left newnod 5 root right right newnod 4 root left left left newnod 3 root left left right newnod 2 root left right left newnod 1 isheap root printf given binari tree heap n els printf given binari tree heap n return 0 java java program check binari tree max heap ot binari tree node class node int key node left right node int k key k left right null class is_binarytree_maxheap function count number node binari tree int countnod node root root null return 0 return 1 countnod root left countnod root right function check binari tree complet boolean iscompleteutil node root int index int number_nod empti tree complet root null return true index assign current node number node tree tree complet index number_nod return fals recur left right subtre return iscompleteutil root left 2 index 1 number_nod iscompleteutil root right 2 index 2 number_nod function check heap properti tree 
boolean isheaputil node root base case singl node satisfi properti root left null root right null return true node second last level root right null check heap properti node recurs call need check last level return root key root left key els check heap properti node recurs check heap properti left right subtre root key root left key root key root right key return isheaputil root left isheaputil root right els return fals function check binari tree heap 
boolean isheap node root root null return true two use iscompleteutil int node_count countnod root iscompleteutil root 0 node_count true isheaputil root true return true return fals driver function test function public static void main string arg is_binarytree_maxheap bt new is_binarytree_maxheap node root new node 10 root left new node 9 root right new node 8 root left left new node 7 root left right new node 6 root right left new node 5 root right right new node 4 root left left left new node 3 root left left right new node 2 root left right left new node 1 bt isheap root true system println given binari tree heap els system println given binari tree heap code contribut amit khandelw output given binari tree heap articl contribut utkarsh trivedi 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

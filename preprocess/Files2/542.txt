previou post introduc b tree 
also discuss search travers function 
post insert oper discuss 
new key alway insert leaf node 
let key insert k like bst start root travers till reach leaf node 
reach leaf node insert key leaf node 
unlik bst predefin rang number key node contain 
insert key node make sure node extra space 
make sure node space avail key key insert 
use oper call splitchild use split child node 
see follow diagram understand split 
follow diagram child x split two node z note splitchild oper move key reason b tree grow unlik bst grow 
discuss insert new key go root leaf 
travers node first check node full 
node full split creat space 
follow complet algorithm 
insert 1 initi x root 
2 x leaf follow find child x go travers next 
let child 
b full chang x point 
c full split chang x point one two part k smaller mid key set x first part els second part split move key parent x 
3 loop step 2 stop x leaf 
x must space 1 extra key split node advanc 
simpli insert k x note algorithm follow cormen book 
actual proactiv insert algorithm go node split full 
advantag split never travers node twice 
split node go split new key insert reactiv may end travers node leaf root 
happen case node path root leaf full 
come leaf node split move key 
move key caus split parent node parent alreadi full 
cascad effect never happen proactiv insert algorithm 
disadvantag proactiv insert though may unnecessari split 
let us understand algorithm exampl tree minimum degre 3 sequenc integ 10 20 30 40 50 60 70 80 90 initi empti b tree 
initi root null 
let us first insert 10 let us insert 20 30 40 50 insert root maximum number key node accommod 2 1 5 let us insert 60 sinc root node full first split two 60 insert appropri child 
let us insert 70 80 new key insert appropri leaf without split 
let us insert 90 insert caus split 
middl key go parent 
see exampl 
follow c implement proactiv algorithm 
c program b tree insert includ iostream use namespac std btree node class btreenod int key array key int minimum degre defin rang number key btreenod c array child pointer int n current number key bool leaf true node leaf 
otherwis fals public btreenod int _t bool _leaf constructor util function insert new key subtre root node 
assumpt node must non full function call void insertnonful int k util function split child node 
index child array c 
child must full function call void splitchild int btreenod function travers node subtre root node void travers function search key subtre root node 
btreenod search int k return null k present 
make btree friend access privat member class btree function friend class btree btree class btree btreenod root pointer root node int minimum degre public constructor initi tree empti btree int _t root null _t function travers tree void travers root null root travers function search key tree btreenod search int k return root null 
null root search k main function insert new key b tree void insert int k constructor btreenod class btreenod btreenod int t1 bool leaf1 copi given minimum degre leaf properti t1 leaf leaf1 alloc memori maximum number possibl key child pointer key new int 2 1 c new btreenod 2 initi number key 0 n 0 function travers node subtre root node void btreenod travers n key n 1 children traver n key first n children int 0 n leaf print key travers subtre root child c 
leaf fals c travers cout key print subtre root last child leaf fals c travers function search key k subtre root node btreenod btreenod search int k find first key greater equal k int 0 n k key found key equal k return node key k return key found leaf node leaf true return null go appropri child return c search k main function insert new key b tree void btree insert int k tree empti root null alloc memori root root new btreenod true root key 0 k insert key root n 1 updat number key root els tree empti root full tree grow height root n 2 1 alloc memori new root btreenod new btreenod fals make old root child new root c 0 root split old root move 1 key new root splitchild 0 root new root two children 
decid two children go new key int 0 key 0 k c insertnonful k chang root root els root full call insertnonful root root insertnonful k util function insert new key node assumpt node must non full function call void btreenod insertnonful int k initi index index rightmost element int n 1 leaf node leaf true follow loop two thing find locat new key insert b move greater key one place ahead 0 key k key 1 key insert new key found locat key 1 k n n 1 els node leaf find child go new key 0 key k see found child full c 1 n 2 1 child full split splitchild 1 c 1 split middl key c goe c split two 
see two go new key key 1 k c 1 insertnonful k util function split child node note must full function call void btreenod splitchild int btreenod creat new node go store 1 key btreenod z new btreenod leaf z n 1 copi last 1 key z int j 0 j 1 j z key j key j copi last children z leaf fals int j 0 j j z c j c j reduc number key n 1 sinc node go new child creat space new child int j n j 1 j c j 1 c j link new child node c 1 z key move node 
find locat new key move greater key one space ahead int j n 1 j j key j 1 key j copi middl key node key key 1 increment count key node n n 1 driver program test function int main btree 3 b tree minium degre 3 insert 10 insert 20 insert 5 insert 6 insert 12 insert 30 insert 7 insert 17 cout travers constuct tree travers int k 6 search k null 
cout npresent cout nnot present k 15 search k null 
cout npresent cout nnot present return 0 output travers constuct tree 5 6 7 10 12 17 20 30 present present refer introduct algorithm 3rd edit clifford stein thoma h cormen charl e leiserson ronald l rivest http www cs utexa edu user djimenez utsa cs3343 lecture17 html pleas write comment find anyth incorrect want share inform topic discuss 
adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

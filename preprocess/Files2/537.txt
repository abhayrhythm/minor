discuss avl insert previou post 
post follow similar approach delet 
step follow delet 
make sure given tree remain avl everi delet must augment standard bst delet oper perform balanc 
follow two basic oper perform balanc bst without violat bst properti key left key root key right 
1 left rotat 2 right rotat t1 t2 t3 subtre tree root left side x right side x right rotat x t3 t1 t1 t2 left rotat t2 t3 key tree follow follow order key t1 key x key t2 key key t3 bst properti violat anywher 
let w node delet 1 perform standard bst delet w 2 start w travel find first unbalanc node 
let z first unbalanc node larger height child z x larger height child note definit x differ insert 
3 balanc tree perform appropri rotat subtre root z 4 possibl case need handl x z arrang 4 way 
follow possibl 4 arrang left child z x left child left left case b left child z x right child left right case c right child z x right child right right case right child z x left child right left case like insert follow oper perform mention 4 case 
note unlik insert fix node z fix complet avl tree 
fix z may fix ancestor z well see video lectur proof left left case t1 t2 t3 t4 subtre 
z t4 right rotat z x z x t3 t1 t2 t3 t4 t1 t2 b left right case z z x t4 left rotat x t4 right rotat z z t1 x t3 t1 t2 t3 t4 t2 t3 t1 t2 c right right case z t1 left rotat z z x t2 x t1 t2 t3 t4 t3 t4 right left case z z x t1 right rotat t1 x left rotat z z x x t4 t2 t1 t2 t3 t4 t2 t3 t3 t4 unlik insert delet perform rotat z may perform rotat ancestor z thu must continu trace path reach root 
c implement follow c implement avl tree delet 
follow c implement use recurs bst delet basi 
recurs bst delet delet get pointer ancestor one one bottom manner 
need parent pointer travel 
recurs code travel visit ancestor delet node 
1 perform normal bst delet 
2 current node must one ancestor delet node 
updat height current node 
3 get balanc factor left subtre height right subtre height current node 
4 balanc factor greater 1 current node unbalanc either left left case left right case 
check whether left left case left right case get balanc factor left subtre 
balanc factor left subtre greater equal 0 left left case els left right case 
5 balanc factor less 1 current node unbalanc either right right case right left case 
check whether right right case right left case get balanc factor right subtre 
balanc factor right subtre smaller equal 0 right right case els right left case 
c includ stdio h includ stdlib h avl tree node struct node int key struct node left struct node right int height util function get maximum two integ int max int int b util function get height tree int height struct node n n null return 0 return n height util function get maximum two integ int max int int b return b 
b helper function alloc new node given key null left right pointer 
struct node newnod int key struct node node struct node malloc sizeof struct node node key key node left null node right null node height 1 new node initi ad leaf return node util function right rotat subtre root see diagram given 
struct node rightrot struct node struct node x left struct node t2 x right perform rotat x right left t2 updat height height max height left height right 1 x height max height x left height x right 1 return new root return x util function left rotat subtre root x see diagram given 
struct node leftrot struct node x struct node x right struct node t2 left perform rotat left x x right t2 updat height x height max height x left height x right 1 height max height left height right 1 return new root return get balanc factor node n int getbal struct node n n null return 0 return height n left height n right struct node insert struct node node int key 1 perform normal bst rotat node null return newnod key key node key node left insert node left key els node right insert node right key 2 updat height ancestor node node height max height node left height node right 1 3 get balanc factor ancestor node check whether node becam unbalanc int balanc getbal node node becom unbalanc 4 case left left case balanc 1 key node left key return rightrot node right right case balanc 1 key node right key return leftrot node left right case balanc 1 key node left key node left leftrot node left return rightrot node right left case balanc 1 key node right key node right rightrot node right return leftrot node return unchang node pointer return node given non empti binari search tree return node minimum key valu found tree 
note entir tree need search 
struct node minvaluenod struct node node struct node current node loop find leftmost leaf current left null current current left return current struct node deletenod struct node root int key step 1 perform standard bst delet root null return root key delet smaller root key lie left subtre key root key root left deletenod root left key key delet greater root key lie right subtre els key root key root right deletenod root right key key root key node delet els node one child child root left null root right null struct node temp root left 
root left root right child case temp null temp root root null els one child case root temp copi content non empti child free temp els node two children get inord successor smallest right subtre struct node temp minvaluenod root right copi inord successor data node root key temp key delet inord successor root right deletenod root right temp key tree one node return root null return root step 2 updat height current node root height max height root left height root right 1 step 3 get balanc factor node check whether node becam unbalanc int balanc getbal root node becom unbalanc 4 case left left case balanc 1 getbal root left 0 return rightrot root left right case balanc 1 getbal root left 0 root left leftrot root left return rightrot root right right case balanc 1 getbal root right 0 return leftrot root right left case balanc 1 getbal root right 0 root right rightrot root right return leftrot root return root util function print preorder travers tree 
function also print height everi node void preorder struct node root root null printf root key preorder root left preorder root right drier program test function int main struct node root null construct tree given figur root insert root 9 root insert root 5 root insert root 10 root insert root 0 root insert root 6 root insert root 11 root insert root 1 root insert root 1 root insert root 2 construct avl tree would 9 1 10 0 5 11 1 2 6 printf pre order travers construct avl tree n preorder root root deletenod root 10 avl tree delet 10 1 0 9 1 5 11 2 6 printf npre order travers delet 10 n preorder root return 0 java java program delet avl tree class node int key height node left right node int key height 1 class avltre static node root util function get height tree int height node n n null return 0 return n height util function get maximum two integ int max int int b return b 
b util function right rotat subtre root see diagram given 
node rightrot node node x left node t2 x right perform rotat x right left t2 updat height height max height left height right 1 x height max height x left height x right 1 return new root return x util function left rotat subtre root x see diagram given 
node leftrot node x node x right node t2 left perform rotat left x x right t2 updat height x height max height x left height x right 1 height max height left height right 1 return new root return get balanc factor node n int getbal node n n null return 0 return height n left height n right node insert node node int key 1 perform normal bst rotat node null return new node key key node key node left insert node left key els node right insert node right key 2 updat height ancestor node node height max height node left height node right 1 3 get balanc factor ancestor node check whether node becam unbalanc int balanc getbal node node becom unbalanc 4 case left left case balanc 1 key node left key return rightrot node right right case balanc 1 key node right key return leftrot node left right case balanc 1 key node left key node left leftrot node left return rightrot node right left case balanc 1 key node right key node right rightrot node right return leftrot node return unchang node pointer return node given non empti binari search tree return node minimum key valu found tree 
note entir tree need search 
node minvaluenod node node node current node loop find leftmost leaf current left null current current left return current node deletenod node root int key step 1 perform standard bst delet root null return root key delet smaller root key lie left subtre key root key root left deletenod root left key key delet greater root key lie right subtre els key root key root right deletenod root right key key root key node delet els node one child child root left null root right null node temp null temp root left temp root right els temp root left child case temp null temp root root null els one child case root temp copi content non empti child els node two children get inord successor smallest right subtre node temp minvaluenod root right copi inord successor data node root key temp key delet inord successor root right deletenod root right temp key tree one node return root null return root step 2 updat height current node root height max height root left height root right 1 step 3 get balanc factor node check whether node becam unbalanc int balanc getbal root node becom unbalanc 4 case left left case balanc 1 getbal root left 0 return rightrot root left right case balanc 1 getbal root left 0 root left leftrot root left return rightrot root right right case balanc 1 getbal root right 0 return leftrot root right left case balanc 1 getbal root right 0 root right rightrot root right return leftrot root return root util function print preorder travers tree 
function also print height everi node void preorder node node node null system print node key preorder node left preorder node right public static void main string arg avltre tree new avltre construct tree given figur root tree insert root 9 root tree insert root 5 root tree insert root 10 root tree insert root 0 root tree insert root 6 root tree insert root 11 root tree insert root 1 root tree insert root 1 root tree insert root 2 construct avl tree would 9 1 10 0 5 11 1 2 6 system println preorder travers construct tree tree preorder root root tree deletenod root 10 avl tree delet 10 1 0 9 1 5 11 2 6 system println system println preorder travers delet 10 tree preorder root code contribut mayank jaiswal output pre order travers construct avl tree 9 1 0 1 5 2 6 10 11 pre order travers delet 10 1 0 1 9 5 2 6 11 time complex rotat oper left right rotat take constant time pointer chang 
updat height get balanc factor also take constant time 
time complex avl delet remain bst delet h h height tree 
sinc avl tree balanc height logn 
time complex avl delet logn 
refer iitd video lectur avl tree insert delet pleas write comment find anyth incorrect want share inform topic discuss 
adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

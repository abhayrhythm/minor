given binari tree key binari tree find node right given key 
node right side return null 
expect time complex n n number node given binari tree 
exampl consid follow binari tree 
output 2 6 output 4 5 output 10 6 5 null 
10 2 6 8 4 5 strongli recommend minim browser tri first 
solut idea level order travers given binari tree 
find given key check next node level order travers level ye return next node otherwis return null 
c program find next right given key includ iostream includ queue use namespac std binari tree node struct node struct node left right int key method find next right given key k return null k present tree k rightmost node level node nextright node root int k base case root null return 0 creat empti queue level order tarvers queue node qn queue store node address queue int ql anoth queue store node level int level 0 initi level 0 enqueu root level qn push root ql push level standard bf loop qn size dequeu node qn level ql node node qn front level ql front qn pop ql pop dequeu node given key k node key k item queue given node rightmost node level return null ql size 0 ql front level return null otherwis return next node queue node return qn front standard bf step enqueu children node node left null qn push node left ql push level 1 node right null qn push node right ql push level 1 reach given key x exist tree return null util function creat new tree node node newnod int key node temp new node temp key key temp left temp right null return temp util function test function void test node root int k node nr nextright root k nr null cout next right k nr key endl els cout next right node found k endl driver program test function int main let us creat binari tree given exampl node root newnod 10 root left newnod 2 root right newnod 6 root right right newnod 5 root left left newnod 8 root left right newnod 4 test root 10 test root 2 test root 6 test root 5 test root 8 test root 4 return 0 java java program find next right given key import java util linkedlist import java util queue binari tree node class node int data node left right node int item data item left right null class binarytre node root method find next right given key k return null k present tree k rightmost node level node nextright node first int k base case first null return null creat empti queue level order tarvers queue store node address queue node qn new linkedlist node anoth queue store node level queue integ ql new linkedlist integ int level 0 initi level 0 enqueu root level qn add first ql add level standard bf loop qn size 0 dequeu node qn level ql node node qn peek level ql peek qn remov ql remov dequeu node given key k node data k item queue given node rightmost node level return null ql size 0 ql peek level return null otherwis return next node queue node return qn peek standard bf step enqueu children node node left null qn add node left ql add level 1 node right null qn add node right ql add level 1 reach given key x exist tree return null util function test function void test node node int k node nr nextright root k nr null system println next right k nr data els system println next right node found k driver program test function public static void main string arg binarytre tree new binarytre tree root new node 10 tree root left new node 2 tree root right new node 6 tree root right right new node 5 tree root left left new node 8 tree root left right new node 4 tree test tree root 10 tree test tree root 2 tree test tree root 6 tree test tree root 5 tree test tree root 8 tree test tree root 4 code contribut mayank jaiswal python python program find next right node given key binari tree node class node constructor creat new node def __init__ self key self key key self left none self right none method find next right given key k return none k present tree k rightmost node level def nextright root k base case root none return 0 creat empti queue level order travers qn queue store node address q1 anoth queue store node level level 0 enqueu root level qn append root q1 append level standard bf loop len qn 0 dequeu node qn level q1 node qn pop 0 level q1 pop 0 dequeu node given key k node key k item queue given node rightmost node level return none len q1 0 q1 0 level return none otherwis return next node queue node return qn 0 standard bf step enqueu children node node left none qn append node left q1 append level 1 node right none qn append node right q1 append level 1 reach given key x exist tree return none def test root k nr nextright root k nr none print next right str k str nr key els print next right node found str k driver program test function root node 10 root left node 2 root right node 6 root right right node 5 root left left node 8 root left right node 4 test root 10 test root 2 test root 6 test root 5 test root 8 test root 4 code contribut nikhil kumar singh nickzuck_007 output next right node found 10 next right 2 6 next right node found 6 next right node found 5 next right 8 4 next right 4 5 time complex code simpl bf travers code visit everi enqueu dequeu node 
therefor time complex n n number node given binari tree 
exercis write function find left node given node 
node left side return null 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

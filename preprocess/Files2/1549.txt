given bst binari search tree may unbalanc convert balanc bst minimum possibl height 
exampl input 30 20 10 output 20 10 30 input 4 3 2 1 output 3 3 2 1 4 2 4 1 3 2 1 4 input 4 3 5 2 6 1 7 output 4 2 6 1 3 5 7 strongli recommend minim browser tri first 
simpl solut travers node inord one one insert self balanc bst like avl tree 
time complex solut n log n solut guarante effici solut construct balanc bst n time minimum possibl height 
step 
travers given bst inord store result array 
step take n time 
note array would sort inord travers bst alway produc sort sequenc 
build balanc bst creat sort array use recurs approach discuss 
step also take n time travers everi element exactli process element take 1 time 
c implement step 
c c program convert left unbalanc bst balanc bst includ bit stdc h use namespac std struct node int data node left right function travers skew binari tree store node pointer vector node void storebstnod node root vector node node base case root null return store node inord sort order bst storebstnod root left node node push_back root storebstnod root right node recurs function construct binari tree node buildtreeutil vector node node int start int end base case start end return null get middl element make root int mid start end 2 node root node mid use index inord travers construct left right subtress root left buildtreeutil node start mid 1 root right buildtreeutil node mid 1 end return root function convert unbalanc bst balanc bst node buildtre node root store node given bst sort order vector node node storebstnod root node constuct bst node int n node size return buildtreeutil node 0 n 1 util function creat new node node newnod int data node node new node node data data node left node right null return node function preorder travers tree void preorder node node node null return printf node data preorder node left preorder node right driver program int main construct skew binari tree 10 8 7 6 5 node root newnod 10 root left newnod 8 root left left newnod 7 root left left left newnod 6 root left left left left newnod 5 root buildtre root printf preorder travers balanc bst n preorder root return 0 

given two binari tree check first tree subtre second one 
subtre tree tree consist node descend subtre correspond root node entir tree subtre correspond node call proper subtre 
exampl follow case tree subtre tree tree 2 10 4 6 30 tree 1 26 10 3 4 6 3 30 solut travers tree preorder fashion 
everi visit node travers see subtre root node ident follow implement 
c includ stdio h includ stdlib h binari tree node data left child right child struct node int data struct node left struct node right util function check whether tree root root1 root2 ident bool areident struct node root1 struct node root2 base case root1 null root2 null return true root1 null root2 null return fals check data root data left right subtre also return root1 data root2 data areident root1 left root2 left areident root1 right root2 right function return true subtre otherwis fals bool issubtre struct node struct node base case null return true null return fals check tree root current node areident return true tree root current node match tri left right subtre one one return issubtre left issubtre right helper function alloc new node given data null left right pointer 
struct node newnod int data struct node node struct node malloc sizeof struct node node data data node left null node right null return node driver program test function int main tree 1 construct follow tree 26 10 3 4 6 3 30 struct node newnod 26 right newnod 3 right right newnod 3 left newnod 10 left left newnod 4 left left right newnod 30 left right newnod 6 tree 2 construct follow tree 10 4 6 30 struct node newnod 10 right newnod 6 left newnod 4 left right newnod 30 issubtre printf tree 2 subtre tree 1 els printf tree 2 subtre tree 1 getchar return 0 java java program check binari tree subtre anoth binari tree binari tree node class node int data node left right nextright node int item data item left right nextright null class binarytre node root1 root2 util function check whether tree root root1 root2 ident boolean areident node root1 node root2 base case root1 null root2 null return true root1 null root2 null return fals check data root data left right subtre also return root1 data root2 data areident root1 left root2 left areident root1 right root2 right function return true subtre otherwis fals boolean issubtre node node base case null return true null return fals check tree root current node areident return true tree root current node match tri left right subtre one one return issubtre left issubtre right public static void main string arg binarytre tree new binarytre tree 1 construct follow tree 26 10 3 4 6 3 30 tree root1 new node 26 tree root1 right new node 3 tree root1 right right new node 3 tree root1 left new node 10 tree root1 left left new node 4 tree root1 left left right new node 30 tree root1 left right new node 6 tree 2 construct follow tree 10 4 6 30 tree root2 new node 10 tree root2 right new node 6 tree root2 left new node 4 tree root2 left right new node 30 tree issubtre tree root1 tree root2 system println tree 2 subtre tree 1 els system println tree 2 subtre tree 1 code contribut mayank jaiswal python python program check binari tree subtre anoth tree binari tree node class node constructor creat new node def __init__ self data self data data self left none self right none util function check whether tree root root 1 root2 indet def areident root1 root2 base case root1 none root2 none return true root1 none root2 none return fals check fi data root data left right subtre also return root1 data root2 data areident root1 left root2 left areident root1 right root2 right function return true subtre otherwis fals def issubtre base case none return true none return true check tree root current node areident return true tree root current node match tri left right subtree one one return issubtre left issubtre right driver program test function tree 1 construct follow tree 26 10 3 4 6 3 30 node 26 right node 3 right right node 3 left node 10 left left node 4 left left right node 30 left right node 6 tree 2 construct follow tree 10 4 6 30 node 10 right node 6 left node 4 left right node 30 issubtre print tree 2 subtre tree 1 els print tree 2 subtre tree 1 code contribut nikhil kumar singh nickzuck_007 output tree 2 subtre tree 1 time complex time worst case complex solut mn n number node given two tree 
solv problem n time 
pleas refer check binari tree subtre anoth binari tree set 2 n solut 
pleas write comment find anyth incorrect want share inform topic discuss 
adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 


Consider simple representation (without any dummy node) of Linked List. Functions that operate on such Linked lists can be divided in two categories:
1) Functions that do not modify the head pointer:  Examples of such functions include, printing a linked list, updating data members of nodes like adding given a value to all nodes, or some other operation which access/update data of nodes
It is generally easy to decide prototype of functions of this category. We can always pass head pointer as an argument and traverse/update the list. For example, the following function that adds x to data members of all nodes.

void addXtoList(struct node *node, int x)
{
    while(node != NULL)
    {
        node->data = node->data + x;
        node = node->next;
    }
}    

2) Functions that modify the head pointer:  Examples include, inserting a node at the beginning (head pointer is always modified in this function),  inserting a node at the end (head pointer is modified only when the first node is being inserted),  deleting a given node (head pointer is modified when the deleted node is first node). There may be different ways to update the head pointer in these functions.  Let us discuss these ways using following simple problem:
“Given a linked list, write a function deleteFirst() that deletes the first node of a given linked list. For example, if the list is 1->2->3->4, then it should be modified to 2->3->4″
Algorithm to solve the problem is a simple 3 step process: (a) Store the head pointer (b) change the head pointer to point to next node (c) delete the previous head node.
Following are different ways to update head pointer in deleteFirst() so that the list is updated everywhere.

given binari tree print vertic 
follow exampl illustr vertic order travers 
1 2 3 4 5 6 7 8 9 output print tree vertic 4 2 1 5 6 3 8 7 9 strongli recommend minim browser tri first 
idea travers tree get minimum maximum horizont distanc respect root 
tree shown minimum distanc 2 node valu 4 maximum distanc 3 node valu 9 
maximum minimum distanc root iter vertic line distanc minimum maximum root vertic line travers tree print node lie vertic line 
algorithm min minimum horizont distanc root max maximum horizont distanc root hd horizont distanc current node root findminmax tree min max hd tree null return hd less min min hd els hd greater max max hd findminmax tree left min max hd 1 findminmax tree right min max hd 1 printverticallin tree line_no hd tree null return hd equal line_no print tree data printverticallin tree left line_no hd 1 printverticallin tree right line_no hd 1 implement follow implement algorithm 
c includ iostream use namespac std node binari tree struct node int data struct node left right util function creat new binari tree node node newnod int data node temp new node temp data data temp left temp right null return temp util function find min max distanc respect root 
void findminmax node node int min int max int hd base case node null return updat min max hd min min hd els hd max max hd recur left right subtre findminmax node left min max hd 1 findminmax node right min max hd 1 util function print node given line_no 
hd horizont distanc current node respect root 
void printverticallin node node int line_no int hd base case node null return node given line number hd line_no cout node data recur left right subtre printverticallin node left line_no hd 1 printverticallin node right line_no hd 1 main function print given binari tree vertic order void verticalord node root find min max distanc resepect root int min 0 max 0 findminmax root min max 0 iter possibl vertic line start leftmost line print node line line int line_no min line_no max line_no printverticallin root line_no 0 cout endl driver program test function int main creat binari tree shown figur node root newnod 1 root left newnod 2 root right newnod 3 root left left newnod 4 root left right newnod 5 root right left newnod 6 root right right newnod 7 root right left right newnod 8 root right right right newnod 9 cout vertic order travers n verticalord root return 0 java java program print binari tree revers order binari tree node class node int data node left right node int item data item left right null class valu int max min class binarytre node root valu val new valu util function find min max distanc respect root 
void findminmax node node valu min valu max int hd base case node null return updat min max hd min min min min hd els hd max max max max hd recur left right subtre findminmax node left min max hd 1 findminmax node right min max hd 1 util function print node given line_no 
hd horizont distanc current node respect root 
void printverticallin node node int line_no int hd base case node null return node given line number hd line_no system print node data recur left right subtre printverticallin node left line_no hd 1 printverticallin node right line_no hd 1 main function print given binari tree vertic order void verticalord node node find min max distanc resepect root findminmax node val val 0 iter possibl vertic line start leftmost line print node line line int line_no val min line_no val max line_no printverticallin node line_no 0 system println driver program test function public static void main string arg binarytre tree new binarytre let us construct tree shown diagram tree root new node 1 tree root left new node 2 tree root right new node 3 tree root left left new node 4 tree root left right new node 5 tree root right left new node 6 tree root right right new node 7 tree root right left right new node 8 tree root right right right new node 9 system println vertic order travers tree verticalord tree root code contribut mayank jaiswal python program print binari tree vertic order binari tree class node constructor creat new node def __init__ self key self data key self left none self right none util function find min max distanc respect root def findminmax node minimum maximum hd base case node none return updat min max hd minimum 0 minimum 0 hd elif hd maximum 0 maximum 0 hd recur left right subtre findminmax node left minimum maximum hd 1 findminmax node right minimum maximum hd 1 util function print node given line_no hd horizont distanc current node respect root def printverticallin node line_no hd base case node none return node given line number hd line_no print node data recur left right subtre printverticallin node left line_no hd 1 printverticallin node right line_no hd 1 def verticalord root find min max distanc respect root minimum 0 maximum 0 findminmax root minimum maximum 0 iter possibl line start leftmost line print node line line line_no rang minimum 0 maximum 0 1 printverticallin root line_no 0 print driver program test function root node 1 root left node 2 root right node 3 root left left node 4 root left right node 5 root right left node 6 root right right node 7 root right left right node 8 root right right right node 9 print vertic order travers verticalord root code contribut nikhil kumar singh nickzuck_007 output vertic order travers 4 2 1 5 6 3 8 7 9 time complex time complex algorithm w n w width binari tree n number node binari tree 
worst case valu w n consid complet tree exampl time complex becom n2 
problem solv effici use techniqu discuss post 
soon discuss complet algorithm implement effici method 
articl contribut shalki agarw 
pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 

discuss follow topic minimum span tree 
applic minimum span tree problem kruskal minimum span tree algorithm prim minimum span tree algorithm post boruvka algorithm discuss 
like prim kruskal boruvka algorithm also greedi algorithm 
complet algorithm 
1 input connect weight direct graph 
2 initi vertic individu compon set 
3 initi mst empti 
4 one compon follow compon 
find closest weight edg connect compon compon 
b add closest edg mst alreadi ad 
5 return mst 
idea behind algorithm idea prim mst algorithm 
span tree mean vertic must connect 
two disjoint subset discuss vertic must connect make span tree 
must connect minimum weight edg make minimum span tree 
let us understand algorithm exampl 
initi mst empti 
everi vertex sing compon highlight blue color diagram 
everi compon find cheapest edg connect compon 
compon cheapest edg connect compon 0 0 1 1 0 1 2 2 8 3 2 3 4 3 4 5 5 6 6 6 7 7 6 7 8 2 8 cheapest edg highlight green color 
mst becom 0 1 2 8 2 3 3 4 5 6 6 7 
step compon 0 1 2 3 4 8 5 6 7 
compon encircl blue color 
repeat step e everi compon find cheapest edg connect compon 
compon cheapest edg connect compon 0 1 1 2 0 7 2 3 4 8 2 5 5 6 7 2 5 cheapest edg highlight green color 
mst becom 0 1 2 8 2 3 3 4 5 6 6 7 1 2 2 5 stage one compon 0 1 2 3 4 5 6 7 8 edg 
sinc one compon left stop return mst 
implement c implement algorithm 
input graph repres collect edg union find data structur use keep track compon 
boruvka algorithm find minimum span tree given connect undirect weight graph includ stdio h structur repres weight edg graph struct edg int src dest weight structur repres connect undirect weight graph collect edg 
struct graph v number vertic e number edg int v e graph repres array edg 
sinc graph undirect edg src dest also edg dest src 
count 1 edg 
edg edg structur repres subset union find struct subset int parent int rank function prototyp union find function defin boruvkamst int find struct subset subset int void union struct subset subset int x int main function mst use boruvka algorithm void boruvkamst struct graph graph get data given graph int v graph v e graph e edg edg graph edg alloc memori creat v subset 
struct subset subset new subset v array store index cheapest edg subset 
store index index array edg int cheapest new int v creat v subset singl element int v 0 v v v subset v parent v subset v rank 0 cheapest v 1 initi v differ tree 
final one tree mst int numtre v int mstweight 0 keep combin compon set compnent combin singl mst 
numtre 1 travers edg updat cheapest everi compon int 0 e find compon set two corner current edg int set1 find subset edg src int set2 find subset edg dest two corner current edg belong set ignor current edg set1 set2 continu els check current edg closer previou cheapest edg set1 set2 els cheapest set1 1 edg cheapest set1 weight edg weight cheapest set1 cheapest set1 1 edg cheapest set2 weight edg weight cheapest set2 consid pick cheapest edg add mst int 0 v check cheapest current set exist cheapest 1 int set1 find subset edg cheapest src int set2 find subset edg cheapest dest set1 set2 continu mstweight edg cheapest weight printf edg includ mst n edg cheapest src edg cheapest dest edg cheapest weight union set1 set2 decreas number tree union subset set1 set2 numtre printf weight mst n mstweight return creat graph v vertic e edg struct graph creategraph int v int e graph graph new graph graph v v graph e e graph edg new edg e return graph util function find set element use path compress techniqu int find struct subset subset int find root make root parent path compress subset parent subset parent find subset subset parent return subset parent function union two set x use union rank void union struct subset subset int x int int xroot find subset x int yroot find subset attach smaller rank tree root high rank tree union rank subset xroot rank subset yroot rank subset xroot parent yroot els subset xroot rank subset yroot rank subset yroot parent xroot rank make one root increment rank one els subset yroot parent xroot subset xroot rank driver program test function int main let us creat follow weight graph 10 0 1 6 5 15 2 3 4 int v 4 number vertic graph int e 5 number edg graph struct graph graph creategraph v e add edg 0 1 graph edg 0 src 0 graph edg 0 dest 1 graph edg 0 weight 10 add edg 0 2 graph edg 1 src 0 graph edg 1 dest 2 graph edg 1 weight 6 add edg 0 3 graph edg 2 src 0 graph edg 2 dest 3 graph edg 2 weight 5 add edg 1 3 graph edg 3 src 1 graph edg 3 dest 3 graph edg 3 weight 15 add edg 2 3 graph edg 4 src 2 graph edg 4 dest 3 graph edg 4 weight 4 boruvkamst graph return 0 output edg 0 3 includ mst edg 0 1 includ mst edg 2 3 includ mst weight mst 19 interest fact boruvka algorithm 1 time complex boruvka algorithm e log v kruskal prim algorithm 
2 boruvka algorithm use step faster random algorithm work linear time e 
3 boruvka algorithm oldest minimum span tree algorithm discov boruuvka 1926 long comput even exist 
algorithm publish method construct effici electr network 
exercis code assum input graph connect fail disconnect graph given 
extend algorithm work disconnect graph also produc forest 
refer http en wikipedia org wiki bor c5 afvka 27s_algorithm pleas write comment find anyth incorrect want share inform topic discuss adsbygoogl window adsbygoogl push compani wise code practic topic wise code practic 
